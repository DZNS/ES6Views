#!/usr/bin/env node
'use strict';

const program = require('commander');
const pkg = require(__dirname+'/../package.json');
const parser = require(__dirname+'/../layout').parser;
const path = require('path');
const fs = require('fs');

const PWD = process.env.PWD;

const getVal = function(param, eparam) {
  let idx = process.argv.indexOf(param)
  if(idx < 0) {
    idx = process.argv.indexOf(eparam)
  }
  return process.argv[idx + 1]
}

const ensureDirectoryExistence = function(filePath) {
  let dirname = path.dirname(filePath);
  if (directoryExists(dirname)) {
    return true;
  }
  ensureDirectoryExistence(dirname);
  fs.mkdirSync(dirname);
}

const directoryExists = function(path) {
  try {
    return fs.statSync(path).isDirectory();
  }
  catch (err) {
    return false;
  }
}

program
.version(pkg.version)
.option('-O', 'writes the parsed html to STDOUT')
.option('-o, --output', 'Define output file path. Extension will be .html')
.option('-e, --extension', 'When using -o, you can use -e to define custom output extension. Ignored if -o is omitted.')
.option('-d, --data', 'Optionally load JSON data from a file at the specified path. This data is passed to the parser for your view to use.')
.option('-x', 'Optionally used Stringified JSON. This data is passed to the parser for your view to use. When this is provided, the input file from -d is ignored')
.option('-s3', 'Generate S3 compatible folder structure outputs. Output file will always be named index.html. Ignored if -o is passed.')
.parse(process.argv)

const filename = process.argv.find((i) => i.indexOf('.es6') >= 0)
let file = filename

if(!file || !file.length) {
  throw new Error("Please specify the file to parse.")
}

file = path.basename(file) === file ? PWD + '/' + file : file;
let output;

{
  const isAWS = program.rawArgs.indexOf('-s3') >= 0 ? true : false

  if (program.output)  {
    output = getVal('-o', '--output')
  }
  else {
    output = path.basename(filename, '.es6')
  }
  
  if(path.basename(output) === output) {
    if(isAWS) {
      output = PWD + '/' + output + '/index'
    }
    else {
      output = PWD + '/' + output
    }
  }

  if (output &&  program.extension) {
    output += "." + getVal('-e', '--extension')
  }
  else {
    output += ".html"
  }

  if(output && path.basename(output) === output) {
    output = PWD + '/' + output
  }
}

let data = {}

let pipeDataString = getVal('-x')
if (!!pipeDataString) {
  data = JSON.parse(pipeDataString)
}
else if(program.data) {
  let dataPath = getVal('-d', '--data')
  if(path.basename(dataPath) === dataPath)
    dataPath = PWD + '/' + dataPath
  data = require(dataPath)
}

// console.debug({ data });
// console.debug({ file });

parser(file, data, (err, markup) => {
  if(err) {
    process.stdout.write("Error after parse \n");
    throw err
  }
  
  if (!!output && !getVal('-O')) {
    // console.debug({ output });

    ensureDirectoryExistence(output)
    fs.writeFile(output, markup, (errx) => {
      if(errx)  {
        throw errx
      }

      console.info("Saved output to ", output)
      process.exit(0)
    });
  }
  else {
    process.stdout.write(markup+'\n');
    process.exit(0);
  }
})
